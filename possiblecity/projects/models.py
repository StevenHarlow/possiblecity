# projects/models.py

import datetime

from markdown import markdown

from django.contrib.auth.models import User
from django.db import models
from django.db.models import permalink
from django.utils.text import slugify

from positions import PositionField
from taggit.managers import TaggableManager
from validatedfile import ValidatedFileField

from .managers import ProjectQuerySet

class Project(models.Model):
    """
       Defines a project, which consists of ideas, plans, images, 
       and drawings for an urban intervention. 
       Users upload projects which can then be networked with
       other users, other projects, or locations within the city.
    """

    STATUS_PENDING = 1
    STATUS_PUBLISHED = 2
    STATUS_REJECTED = 3
    STATUS_HIDDEN = 4
    STATUS_CHOICES = (
        (STATUS_PENDING, 'Pending'),
        (STATUS_PUBLISHED, 'Published'),
        (STATUS_REJECTED, 'Rejected'),
        (STATUS_HIDDEN, 'Hidden'),
    )

    SIZE_SMALL = 1
    SIZE_MEDIUM = 2
    SIZE_LARGE = 3
    SIZE_EXTRALARGE = 4
    STATUS_CHOICES = (
        (SIZE_SMALL, 'Small'),
        (STATUS_MEDIUM, 'Medium'),
        (STATUS_LARGE, 'Large'),
        (STATUS_EXTRALARGE, 'Extra Large'),
    )

    # Project owner manages these fields
    title = models.CharField(max_length=100, unique=True)
    tagline = models.CharField(max_length=140, 
         help_text="A tweet-length summary of the project.")
    description = models.TextField()

    # Categorization
    tags = TaggableManager(blank=True)
    size = models.IntegerField(choices=SIZE_CHOICES, 
                               default=SIZE_SMALL)    

    # Site admin manages these fields
    user = models.ForeignKey(User, help_text="The owner of the project.")
    slug = models.SlugField(unique=True,
         help_text="Suggested value automatically generated from title. \
             Must be unique.")
    status = models.IntegerField(choices=STATUS_CHOICES, 
        default=STATUS_PENDING,
        help_text="Only projects with published status \
            will be publicly displayed.")
    enable_comments = models.BooleanField(default=True)
    moderate_comments = models.BooleanField(default=True)
    featured = models.BooleanField(default=True)
    grounded = models.DateField("date grounded", blank=True, null=True)

    # autogenerated fields
    description_html = models.TextField(blank=True,editable=False)
    created = models.DateField(auto_now_add=True, editable=False)
    modified = models.DateField(auto_now=True, editable=False)
    floated = models.DateField("date floated", 
        editable=False, blank=True, null=True)

    def render_markup(self):
        """Turns  markup into HTML"""
        original = self.description_html
        self.description_html = markdown(self.description)
        return self.description_html != original

    def get_lead_image(self):
        return self.projectvisual_set.filter(lead=True)

    def save(self, *args, **kwargs):
        self.render_markup()
        if not self.floated:
             if self.status == self.STATUS_PUBLISHED:
                self.floated = datetime.datetime.now()

        super(Project, self).save(*args, **kwargs)

    def __unicode__(self):
        return u'%s' % (self.title)
       
    @permalink
    def get_absolute_url(self):
        return ('projects_project_detail', [str(self.slug)])    

class ProjectVisual(models.Model):
    """
        An image, video, or animation used to help describe a project.
    """
    file = ValidatedFileField(
                    upload_to = get_upload_path,
                    max_upload_size = 10240,
                    content_types = ['image/png', 'image/jpg'])
    title = models.CharField(max_length=100, null=True, blank=True)
    caption = models.CharField(max_length=140, null=True, blank=True)
    
    # relations
    project = models.ForeignKey(Project)
    
    # metadata
    order = PositionField(collection='project', default=0)
    public = models.BooleanField(default=True)    
    lead = models.BooleanField(default=False)

    # autogenerated fields
    added = models.DateField(auto_now_add=True, editable=False)
    modified = models.DateField(auto_now=True, editable=False)


    def get_upload_path(instance, filename):
        return os.path.join('projects', 
            slugify(instance.project.title), 'visuals',  filename)

    @property
    def filename(self):
        return os.path.basename(self.file.name)

    def __unicode__(self):
        if self.title:
            return u'%s' % self.title
        else:
            return u'%s' % self.filename 

    def save(self, *args, **kwargs):
        if self.lead:
            related_files = self._default_manager.filter(project=self.project)
            related_files.update(lead=False)
                
        return super(ProjectVisual, self).save(*args, **kwargs)
